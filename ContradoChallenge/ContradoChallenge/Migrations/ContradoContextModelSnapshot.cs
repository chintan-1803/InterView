// <auto-generated />
using System;
using ContradoChallenge.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ContradoChallenge.Migrations
{
    [DbContext(typeof(ContradoContext))]
    partial class ContradoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ContradoChallenge.Models.Des_Facet", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("resultId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("resultId");

                    b.ToTable("Des_Facet");
                });

            modelBuilder.Entity("ContradoChallenge.Models.Geo_Facet", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("resultId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("resultId");

                    b.ToTable("Geo_Facet");
                });

            modelBuilder.Entity("ContradoChallenge.Models.Multimedia", b =>
                {
                    b.Property<int>("multimediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("copyright")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("format")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("height")
                        .HasColumnType("int");

                    b.Property<int?>("resultId")
                        .HasColumnType("int");

                    b.Property<string>("subtype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("width")
                        .HasColumnType("int");

                    b.HasKey("multimediaId");

                    b.HasIndex("resultId");

                    b.ToTable("Multimedia");
                });

            modelBuilder.Entity("ContradoChallenge.Models.Org_Facet", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("resultId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("resultId");

                    b.ToTable("Org_Facet");
                });

            modelBuilder.Entity("ContradoChallenge.Models.Per_Facet", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("resultId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("resultId");

                    b.ToTable("Per_Facet");
                });

            modelBuilder.Entity("ContradoChallenge.Models.Result", b =>
                {
                    b.Property<int>("resultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("abstract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("byline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("item_type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kicker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("material_type_facet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("published_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("section")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("short_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("subsection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updated_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("resultId");

                    b.ToTable("Result");
                });

            modelBuilder.Entity("ContradoChallenge.Models.Des_Facet", b =>
                {
                    b.HasOne("ContradoChallenge.Models.Result", null)
                        .WithMany("des_facet")
                        .HasForeignKey("resultId");
                });

            modelBuilder.Entity("ContradoChallenge.Models.Geo_Facet", b =>
                {
                    b.HasOne("ContradoChallenge.Models.Result", null)
                        .WithMany("geo_facet")
                        .HasForeignKey("resultId");
                });

            modelBuilder.Entity("ContradoChallenge.Models.Multimedia", b =>
                {
                    b.HasOne("ContradoChallenge.Models.Result", null)
                        .WithMany("multimedia")
                        .HasForeignKey("resultId");
                });

            modelBuilder.Entity("ContradoChallenge.Models.Org_Facet", b =>
                {
                    b.HasOne("ContradoChallenge.Models.Result", null)
                        .WithMany("org_facet")
                        .HasForeignKey("resultId");
                });

            modelBuilder.Entity("ContradoChallenge.Models.Per_Facet", b =>
                {
                    b.HasOne("ContradoChallenge.Models.Result", null)
                        .WithMany("per_facet")
                        .HasForeignKey("resultId");
                });

            modelBuilder.Entity("ContradoChallenge.Models.Result", b =>
                {
                    b.Navigation("des_facet");

                    b.Navigation("geo_facet");

                    b.Navigation("multimedia");

                    b.Navigation("org_facet");

                    b.Navigation("per_facet");
                });
#pragma warning restore 612, 618
        }
    }
}
